import Text.Show.Functions

data Persona = Persona{
    nombre:: String,
    dinero :: Int, 
    tacticas::Tacticas, 
    propiedades:: [Propiedades], 
    acciones ::[Accion]
}deriving Show

type Tacticas = String
type Propiedades = (String, Int)
type Accion = Persona -> Persona

carolina :: Persona
carolina = Persona{
    nombre= Carolina,
    dinero = 500,
    tacticas= "Accionista",
    propiedades= [],
    acciones = [pagarAAccionista , pasarPorElBanco]
    }
    
manuel :: Persona
manuel = Persona{
    nombre= Manuel,
    dinero = 500,
    tacticas= "Oferente singular",
    propiedades= [],
    acciones = [pagarAAccionista, pasarPorElBanco]
    }

pasarPorElBanco :: Accion
pasarPorElBanco unaPersona = cambiarTactica "comprador compulsivo".transaccion(40)

transaccion :: int->Persona->Persona
transaccion plata unaPersona = unaPersona{dinero = plata + dinero unaPersona}
cambiarTactica :: String -> Persona -> Persona
cambiarTactica nuevaTactica unaPersona = unaPersona{tacticas = nuevaTactica}

enojarse :: Accion
enojarse unaPersona = darAccion "gritar".transaccion(50)

darAccion :: String->Persona->Persona
darAccion nuevaAccion unaPersona = unaPersona{acciones = nuevaAccion + acciones unaPersona} 

gritar ::Accion
gritar unaPersona = unaPersona{nombre =  nombre  + "AHHHH" }

subastar :: Persona -> Propiedades -> Persona
subastar unaPersona nuevaPropiedad
                                |puedeSubastar unaPersona = transaccion(negate.snd.nuevaPropiedad)unaPersona
--que pasa si no puede subastar?
puedeSubastar :: Persona->Propiedades->String
puedeSubastar unaPersona unaPropiedad = suTactica unaPersona == "Oferente singular" || suTactica unaPersona == "Accionista" && tieneElDinero unaPersona unaPropiedad

tieneElDinero :: Persona -> Propiedades->Bool
tieneElDinero unaPersona unaPropiedad = snd unaPropiedad <= dinero unaPersona

suTactica :: Persona->String
suTactica unaPersona = print.tacticas



cobrarAlquileres :: Accion
cobrarAlquileres unaPersona 
                        |esPropiedadBarata.map snd propiedades = transaccion(10) unaPersona
                        |otherwise = transaccion(20) unaPersona


esPropiedadBarata :: Int->Bool
esPropiedadBarata unValor = 150 > unValor

pagarAAccionista :: Accion
pagarAAccionista unaPersona 
                        | tacticas unaPersona == "Accionista" = transaccion(200) unaPersona
                        |otherwise = transaccion (-100)

hacerBerrinchePor :: Persona->Propiedades->Persona
hacerBerrinchePor unaPersona unaPropiedad 
                            | tieneElDinero unaPersona unaPropiedad = subastar unaPersona unaPropiedad
                            |otherwise = hacerBerrinchePor (gritar.transaccion(10) unaPersona) propiedad


juegoFinal :: Persona->Persona->Persona
juegoFinal unjugador otrojugador
            |dinero unjugador > dinero otrojugador = unjugador
            |otherwise = otrojugador

ultimaRonda :: Persona -> Persona
ultimaRonda unaPersona = fold (.) unaPersona (acciones unaPersona)